---
description: 
globs: 
alwaysApply: true
---
# Feature Architecture Rules

## Component Structure
- Server components should be in `app/[feature]/[dynamic-routes]/page.tsx`
- Client components should be in `app/[feature]/components/`
- Context should be in `app/[feature]/context/`
- Server actions should be in `app/[feature]/actions.ts`

## Component Responsibilities

### Server Component (`page.tsx`)
- Should only handle routing and suspense
- Should not contain any client-side logic
- Should use client components for data fetching and rendering
- Must wrap client components in Suspense

### Client Data Fetcher Component
- Must be marked with "use client"
- Should handle all data fetching using context actions
- Must manage loading, error, and success states
- Should include proper cleanup in useEffect
- Must include proper ARIA roles for accessibility
- Should handle component unmounting

### Context (`[feature]-context.tsx`)
- Must provide all server actions through props
- Should not contain any UI components
- Must be used for all server-side operations
- Should be wrapped around all feature routes
- Must implement proper TypeScript interfaces
- Must handle loading, error, and success states
- Must implement proper cleanup in useEffect

### Layout (`layout.tsx`)
- Must import and use feature Provider
- Must pass server actions to Provider
- Should include navigation unless explicitly excluded
- Should handle any feature-wide UI elements

## Testing Requirements
- Tests should be in `__tests__/pages/[feature]/`
- Must test loading states
- Must test error states
- Must test all data fetching scenarios
- Must test all user interactions
- Must include proper ARIA role testing

## Accessibility Requirements
- Loading states must include role="status"
- Error states must include role="alert"
- All interactive elements must be keyboard accessible
- All images must have alt text
- All form elements must have labels

## Performance Requirements
- Use proper cleanup in useEffect
- Implement proper error boundaries
- Use proper suspense boundaries
- Implement proper loading states
- Use proper error states

## File Structure Example
```
app/[feature]/
├── [dynamic-routes]/
│   └── page.tsx
├── components/
│   ├── feature-content.tsx
│   └── feature-data-fetcher.tsx
├── context/
│   └── feature-context.tsx
├── actions.ts
└── layout.tsx

__tests__/
└── pages/
    └── [feature]/
        └── page.test.tsx
```

## Dependencies
- Server components should not import client components directly
- Client components should not import server components
- Context should not import UI components
- Actions should not import UI components
- Layout should handle Provider setup and navigation

## State Management
- Use context for feature-wide state
- Implement proper loading states
- Handle error states gracefully
- Clean up subscriptions and async operations
- Use proper TypeScript types for all state